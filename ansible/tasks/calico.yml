---
- name: Download Calico manifest
  get_url:
    url: https://raw.githubusercontent.com/projectcalico/calico/master/manifests/calico.yaml
    dest: "{{ user_home }}/calico.yaml"
    owner: ubuntu
    group: ubuntu
    mode: "0644"

- name: Update pod CIDR in Calico manifest
  replace:
    path: "{{ user_home }}/calico.yaml"
    regexp: '# - name: CALICO_IPV4POOL_CIDR\n#   value: "192.168.0.0/16"'
    replace: '- name: CALICO_IPV4POOL_CIDR\n  value: "{{ pod_network_cidr }}"'

- name: Apply Calico manifest
  become: true
  environment:
    KUBECONFIG: "{{ user_home }}/.kube/config"
  command: kubectl apply -f {{ user_home }}/calico.yaml
  register: calico_apply
  retries: 6
  delay: 10
  until: calico_apply.rc == 0

- name: Wait for Calico pods to be ready
  become: true
  environment:
    KUBECONFIG: "{{ user_home }}/.kube/config"
  command: kubectl wait --for=condition=ready pod -l k8s-app=calico-node -n kube-system --timeout=300s
  register: wait_calico
  retries: 10
  delay: 30
  until: wait_calico.rc == 0

- name: Wait for Calico API resources to be ready
  become: true
  environment:
    KUBECONFIG: "{{ user_home }}/.kube/config"
  command: kubectl wait --for=condition=Established crd/ippools.crd.projectcalico.org --timeout=60s
  register: wait_crd
  retries: 10
  delay: 10
  until: wait_crd.rc == 0

- name: Wait for IPPool to be created
  become: true
  environment:
    KUBECONFIG: "{{ user_home }}/.kube/config"
  command: kubectl get ippool default-ipv4-ippool
  register: ippool_check
  retries: 12
  delay: 10
  until: ippool_check.rc == 0

- name: Configure Calico IPPool CIDR
  become: true
  environment:
    KUBECONFIG: "{{ user_home }}/.kube/config"
  command: >
    kubectl patch ippool default-ipv4-ippool 
    --patch '{"spec":{"cidr":"{{ pod_network_cidr }}"}}' 
    --type=merge
  register: ippool_patch
  retries: 6
  delay: 10
  until: ippool_patch.rc == 0

- name: Wait for cluster network functionality
  become: true
  environment:
    KUBECONFIG: "{{ user_home }}/.kube/config"
  command: kubectl get nodes -o jsonpath='{.items[*].status.conditions[?(@.type=="Ready")].status}'
  register: nodes_ready
  retries: 20
  delay: 15
  until: nodes_ready.stdout | regex_search('^True(\s+True)*$')
