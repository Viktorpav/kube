# =============================================================================
# WAIT FOR API SERVER TO BE READY
# =============================================================================
- name: Wait for all nodes to join
  shell: kubectl wait --for=condition=Ready nodes --all --timeout=600s
  environment:
    KUBECONFIG: "{{ user_home }}/.kube/config"

# =============================================================================
# CALICO RBAC - Required for Calico CNI to function properly
# =============================================================================
- name: Create calico-node ServiceAccount
  shell: |
    kubectl apply -f - <<EOF
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: calico-node
      namespace: kube-system
    EOF
  environment:
    KUBECONFIG: "{{ user_home }}/.kube/config"

- name: Create ClusterRole for calico-node
  shell: |
    kubectl apply -f - <<EOF
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: calico-node
    rules:
      - apiGroups: [""]
        resources: ["nodes","nodes/status"]
        verbs: ["get","list","watch","update","patch"]
      - apiGroups: [""]
        resources: ["pods","pods/status"]
        verbs: ["get","list","watch","patch","update"]
      - apiGroups: [""]
        resources: ["namespaces","serviceaccounts","configmaps","endpoints","services","events"]
        verbs: ["get","list","watch","create","update","patch"]
      - apiGroups: [""]
        resources: ["configmaps"]
        resourceNames: ["calico-config"]
        verbs: ["get","list","watch","update"]
      - apiGroups: ["networking.k8s.io"]
        resources: ["networkpolicies"]
        verbs: ["get","list","watch"]
      - apiGroups: ["crd.projectcalico.org"]
        resources: ["*"]
        verbs: ["*"]
      - apiGroups: ["coordination.k8s.io"]
        resources: ["leases"]
        verbs: ["create","get","list","update","delete"]
      - apiGroups: ["authentication.k8s.io"]
        resources: ["tokenreviews"]
        verbs: ["create"]
      - apiGroups: ["authorization.k8s.io"]
        resources: ["subjectaccessreviews"]
        verbs: ["create"]
      - apiGroups: ["certificates.k8s.io"]
        resources: ["certificatesigningrequests"]
        verbs: ["get","list","watch","create","update","delete"]
      - apiGroups: [""]
        resources: ["serviceaccounts","serviceaccounts/token"]
        verbs: ["create","get","list","watch"]
      - apiGroups: ["discovery.k8s.io"]
        resources: ["endpointslices"]
        verbs: ["get","list","watch"]
      - apiGroups: ["policy.networking.k8s.io"]
        resources: ["adminnetworkpolicies","baselineadminnetworkpolicies"]
        verbs: ["get","list","watch"]
    EOF
  environment:
    KUBECONFIG: "{{ user_home }}/.kube/config"

- name: Create ClusterRoleBinding for calico-node
  shell: |
    kubectl apply -f - <<EOF
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: calico-node
    subjects:
      - kind: ServiceAccount
        name: calico-node
        namespace: kube-system
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: calico-node
    EOF
  environment:
    KUBECONFIG: "{{ user_home }}/.kube/config"

# =============================================================================
# CUSTOM ADMIN USER - Optional, only if you need a custom admin ServiceAccount
# =============================================================================
- name: Ensure admin-user ServiceAccount exists
  shell: |
    kubectl apply -f - <<EOF
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: admin-user
      namespace: kube-system
    EOF
  environment:
    KUBECONFIG: "{{ user_home }}/.kube/config"
  run_once: true

- name: Ensure ClusterRoleBinding for admin-user exists
  shell: |
    kubectl apply -f - <<EOF
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: admin-user-binding
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cluster-admin
    subjects:
    - kind: ServiceAccount
      name: admin-user
      namespace: kube-system
    EOF
  environment:
    KUBECONFIG: "{{ user_home }}/.kube/config"
  run_once: true
